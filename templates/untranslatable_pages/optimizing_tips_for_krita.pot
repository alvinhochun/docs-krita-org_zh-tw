# SOME DESCRIPTIVE TITLE.
# Copyright (C) licensed under the GNU Free Documentation License 1.3+ unless stated otherwise
# This file is distributed under the same license as the Krita Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Krita Manual 5.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-19 22:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:1
msgid "Guide for optimizing Krita."
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:16
msgid "Optimizing tips and tools for Krita"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:19
msgid "Hot Spots"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:21
msgid "thumbnails are recalculated a lot"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:22
msgid "the histogram docker calculates even when hidden"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:23
msgid "brush outline seems slow"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:24
msgid "the calculation of the mask for the autobrush is very slow and doesn't cache anything"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:25
msgid "caching a whole row or column of tiles in the h/v line iterators should speed up things a lot"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:26
msgid "tile engine 1 has the BKL; tile engine 2 cannot swap yet and isn't optimized yet"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:27
msgid "projection recomposition doesn't take the visible area into account"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:28
msgid "pigment preloads all profiles (startup hit)"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:29
msgid "gradients are calculated on load, instead of being associated with a PNG preview image that is cheap to load"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:32
msgid "Tools"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:35
msgid "Valgrind"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:38
msgid "Tips"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:40
msgid "You can tell callgrind to focus only on the part of the code you want to optimize. This results in cleaner data.  For example, you may want to only monitor the performance when drawing a stroke. Unless the thing you're trying to optimize is the program startup, you can tell valgrind to run with the logging, or instrumentation, turned off at start:"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:42
msgid "``valgrind  --tool=callgrind --instr-atstart=no krita``"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:44
msgid "Instrumentation can then be activated and deactivated with callgrind_control. To begin performance monitoring:"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:46
msgid "``callgrind_control -i on``"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:48
msgid "And then to end it:"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:50
msgid "``callgrind_control -i off``"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:52
msgid "I usually write a few aliases in my .bashrc  (or .zshrc):"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:54
msgid "alias callgrind=\"valgrind --tool=callgrind --instr-atstart=no\"\n"
"alias callgrind-on=\"callgrind_control --instr=on\"\n"
"alias callgrind-off=\"callgrind_control --instr=off\""
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:61
msgid "Sysprof"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:65
msgid "mutrace"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:67
msgid "`mutrace <http://0pointer.de/blog/projects/mutrace.html>`_ is a tool that count how much time is spend waiting for a mutex to unlock."
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:70
msgid "Easy optimization"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:72
msgid "As soon as you see slow code, try to have a look at the code to see if we aren't creating a lot of unnecesserary objects, 90% of the time slow code is caused by this (the remain 10% are often caused by a lot of access to the tilesmanager, like with random accessor)"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:77
msgid "For instance:"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:79
#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:104
msgid "Avoid:"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:81
msgid "for(whatever)\n"
"{\n"
"    QColor c;\n"
"    ...\n"
"}"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:89
#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:117
msgid "Do:"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:91
msgid "QColor c;\n"
"for(whatever)\n"
"{\n"
"\n"
"}"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:99
msgid "It might seems insignificant, but really it's not, on a loop of a milion of iterations, this is expensive as hell."
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:102
msgid "An other example:"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:106
msgid "for(y = 0 to height)\n"
"{\n"
"    KisHLineIterator it = dev->createHLineIterator(0, y, width);\n"
"    for(whatever)\n"
"    {\n"
"        ...\n"
"    }\n"
"}"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:119
msgid "KisHLineIterator it = dev->createHLineIterator(0, 0, width);\n"
"for(y = 0 to height)\n"
"{\n"
"    for(whatever)\n"
"    {\n"
"        ...\n"
"    }\n"
"    it.nextRow(); // or nextCol() if you are using a VLine iterator\n"
"}"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:132
msgid "Vector instructions"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:134
msgid "Krita takes heavy advantage of the `Vc <https://github.com/VcDevel/Vc>`_ library to speed up its brush strokes with CPU vector instructions.  If you are planning to work with that library, it is worth reading through its documentation."
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:136
msgid "There are more general introductions to what vector instructions are for, and how they work here."
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:138
msgid "`Reference about MMX on Intel's website <http://developer.intel.com/design/archives/processors/mmx/>`_."
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:139
msgid "`Fundamentals of Media Processor Designs <http://www.cise.ufl.edu/~peir/cda6159/media12.pdf>`_: introduction to the use of MMX/SSE instructions."
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:140
msgid "`Software Optimization Guide for AMD64 <http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/25112.PDF>`_."
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:141
msgid "`STL like programming but using MMX/SSE{1,2,3} when available <http://www.pixelglow.com/macstl/>`_."
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:144
msgid "Profile guided optimization"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:146
msgid "Profile guided optimization is something else though. It is a special way of compiling and linking, that the compiler and linker use profiling information to know how best to optimize the code. So code that is used a lot is compiled with -O3 (the most optimizations), while code that is not used a lot gets -Os (to take less space), and so forth. This is a very useful technique that was not available on Linux until last year, and the news today is that Firefox now builds properly with it and there is a nice noticeable speed improvement for Linux users."
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:148
msgid "source:"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:149
msgid "https://linux.slashdot.org/comments.pl?sid=2117150&cid=35987784"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:151
msgid "wikipedia:"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:151
msgid "https://en.wikipedia.org/wiki/Profile-guided_optimization"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:153
msgid "g++ -O3 -march=native -pg -fprofile-generate ...\n"
"// run my program's benchmark\n"
"g++ -O3 -march=native -fprofile-use ..."
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:160
msgid "Links"
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:163
msgid "`Design for Performance <https://es.scribd.com/document/53483851/Design-for-Performance>`_: great read about performance optimization (aimed at game developers, but many tricks apply for Krita)."
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:164
msgid "`TCMalloc <http://goog-perftools.sourceforge.net/doc/tcmalloc.html>`_: a malloc replacement which make faster allocation of objects by caching some reserved part of the memory."
msgstr ""

#: ../../untranslatable_pages/optimizing_tips_for_krita.rst:165
msgid "`Optmizing CPP <http://www.agner.org/optimize/optimizing_cpp.pdf>`_: extensive manual on writing optimized code."
msgstr ""
