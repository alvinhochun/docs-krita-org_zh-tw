# SOME DESCRIPTIVE TITLE.
# Copyright (C) licensed under the GNU Free Documentation License 1.3+ unless stated otherwise
# This file is distributed under the same license as the Krita Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Krita Manual 5.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-27 21:21+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../untranslatable_pages/building_krita.rst:580
#: ../../untranslatable_pages/building_krita.rst:580
msgid "Contents:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:1
msgid "Guide to building Krita from source."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:16
msgid "Building Krita from Source"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:18
msgid "If you want to help developing Krita, you need to know how to build Krita yourself. If you merely want to run the latest version of Krita, to test a bug or play with, you can use the `nightly build for Windows <https://binary-factory.kde.org/job/Krita_Nightly_Windows_Build/>`_ the `nightly build for Linux <https://binary-factory.kde.org/job/Krita_Nightly_Appimage_Build/>`_, or the `nightly build for macOS <https://binary-factory.kde.org/job/Krita_Nightly_MacOS_Build/>`_."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:21
msgid "Contents"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:23
msgid "You can build Krita on Linux, Windows, macOS and on Linux for Android. The libraries Krita needs (for instance to load and save various image types) are called dependencies."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:25
msgid "Linux is the easiest operating system to build Krita on because all the libraries that Krita needs are available on most recent Linux distributions. For an easy guide to building Krita see `Building Krita on Linux for Cats <https://www.davidrevoy.com/article193/compil-krita-from-source-code-on-linux-for-cats>`_."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:27
msgid "On macOS you can use tools like homebrew to get the dependencies, or build the dependencies manually. Building the dependencies manually is recommended because we have a number of changes to the source for libraries to make them function better with Krita."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:29
msgid "On Windows you will have to build the dependencies yourself."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:31
msgid "On all operating systems, you need to be familiar with using a terminal. Building Krita is a technical task and demands accuracy in following instructions and intelligence in understanding what happens."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:34
msgid "Building on Linux"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:37
msgid "Preparing your development environment"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:41
msgid "The most convenient layout is as follows:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:43
msgid "$HOME/kritadev/krita -- the source code"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:44
msgid "$HOME/kritadev/build -- the location where you compile krita"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:45
msgid "$HOME/kritadev/install -- the location where you install krita to and run krita from"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:47
msgid "we will call the \"kritadev\" folder your build root."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:49
msgid "Note: type in what's shown after '>' in the following commands"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:51
msgid "you@yourcomputer:~>cd\n"
"you@yourcomputer:~>mkdir kritadev\n"
"you@yourcomputer:~/>cd kritadev\n"
"you@yourcomputer:~/kritadev> mkdir build\n"
"you@yourcomputer:~/kritadev> mkdir install"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:60
msgid "Getting the Source Code"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:64
msgid "Open a terminal and enter the build root. Clone Krita from kde's git infrastructure (not github):"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:66
msgid "you@yourcomputer:~/kritadev> git clone https://invent.kde.org/graphics/krita.git"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:71
msgid "Configuring the Build"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:75
msgid "you@yourcomputer:~/kritadev> cd build"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:79
msgid "Krita uses cmake (https://cmake.org) to define how Krita is built on various platforms. You first need to run cmake to generate the build system, in the :file:`kritadevs/build` directory, then run make to make Krita, then run make install to install krita."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:81
msgid "you@yourcomputer:~/kritadev/build>cmake ../krita \\\n"
"        -DCMAKE_INSTALL_PREFIX=$HOME/kritadev/install  \\\n"
"        -DCMAKE_BUILD_TYPE=Debug \\\n"
"        -DKRITA_DEVS=ON"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:90
msgid "Unless you have installed all the dependencies Krita needs, on first running cmake, cmake will complain about missing dependencies. For instance:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:92
msgid "-- The following RECOMMENDED packages have not been found:\n"
"\n"
"* GSL, <https://www.gnu.org/software/gsl/>\n"
"Required by Krita's Transform tool."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:100
msgid "This is not an error, and you can fix this by installing the missing package using your distribution's package manager. Do not download these packages manually from the source website and build them manually. Do use your distribution's package manager to find the right packages."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:102
msgid "For example, for Ubuntu, you can start with:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:104
msgid "you@yourcomputer:~/kritadev/build>apt-get build-dep krita"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:108
msgid "Which will install all the dependencies of the version of Krita in the repositories. You might need to enable the deb-src repositories by editing /etc/apt/sources.list (see https://help.ubuntu.com/community/Repositories/CommandLine) or, if you're using the KDE Plasma desktop, enabling them in the the Settings of the Discover application."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:110
msgid "However, the development version might use different dependencies, to find these, you can use ``apt-cache search``:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:112
msgid "you@yourcomputer:~/kritadev/build>apt-cache search quazip\n"
"libquazip-dev - C++ wrapper for ZIP/UNZIP (development files, Qt4 build)\n"
"libquazip-doc - C++ wrapper for ZIP/UNZIP (documentation)\n"
"libquazip-headers - C++ wrapper for ZIP/UNZIP (development header files)\n"
"libquazip1 - C++ wrapper for ZIP/UNZIP (Qt4 build)\n"
"libquazip5-1 - C++ wrapper for ZIP/UNZIP (Qt5 build)\n"
"libquazip5-dev - C++ wrapper for ZIP/UNZIP (development files, Qt5 build)\n"
"libquazip5-headers - C++ wrapper for ZIP/UNZIP (development header files, Qt5 build)"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:123
msgid "You will want to get the 'dev' library here, because you're doing dev, and then Krita is using Qt5, so select that one. If this doesn't help, check the `Ubuntu packages search <https://packages.ubuntu.com/>`_."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:125
msgid "If all dependencies have been installed, cmake will output something like this:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:127
msgid "-- Configuring done\n"
"-- Generating done\n"
"-- Build files have been written to: /home/boud/dev/b-krita"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:134
msgid "There is one run-time package that you need to install. CMake will not warn about it missing. That is the Qt5 SQLite database driver package. On Ubuntu this is named libqt5sql5-sqlite, the name might be different on other distributions. You need this to be able to start Krita after you have built and installed Krita! This is only needed if you build the master (5.0) branch of Krita."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:137
msgid "**Until that is shown, cmake has not succeeded and you cannot build Krita.** When this is shown, you can build Krita:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:141
msgid "you@yourcomputer:~/kritadev/build> make"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:145
msgid "You can speed this up by enabling multithreading. To do so, you first figure out how many threads your processor can handle:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:147
msgid "cat /proc/cpuinfo | grep processor | wc -l"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:151
msgid "Then, add the resulting number with -j (for 'Jobs') at the end, so for example:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:153
msgid "you@yourcomputer:~/kritadev/build> make -j4"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:158
msgid "Installing"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:161
msgid "When the build has fully succeeded, you can install:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:163
msgid "you@yourcomputer:~/kritadev/build> make install"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:167
msgid "And when that is complete, you can run Krita:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:169
msgid "you@yourcomputer:~/kritadev/build>../install/bin/krita"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:174
#: ../../untranslatable_pages/building_krita.rst:411
#: ../../untranslatable_pages/building_krita.rst:494
msgid "Running Krita"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:176
msgid "You do not have to set environment variables in order to run Krita."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:178
msgid "you@yourcomputer:~> cd ~/kritadev/\n"
"you@yourcomputer:~> ./install/bin/krita"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:186
msgid "Updating"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:189
msgid "Now, Krita is in constant development, so you will want to update your build from time to time. Maybe a cool feature got in, or a bug was fixed, or you just want the latest source."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:193
msgid "First, we get the new source from the git repository:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:195
msgid "you@yourcomputer:~> cd ~/kritadev/krita/\n"
"you@yourcomputer:~/kritadev/krita> git pull"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:200
msgid "If you want to get the code from a specific branch, you will need to ``checkout`` that branch first:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:202
msgid "you@yourcomputer:~/kritadev/krita> git checkout <name of the branch>\n"
"you@yourcomputer:~/kritadev/krita> git pull"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:209
msgid "Then, we build again:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:211
#: ../../untranslatable_pages/building_krita.rst:247
msgid "you@yourcomputer:~/kritadev/krita> cd ~/kritadev/build/\n"
"you@yourcomputer:~/kritadev/build> make install"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:216
msgid "If you update daily, you might want to automate these command by making your own minimal bash script."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:219
msgid "Trouble Shooting"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:223
msgid "The recent development version might break, or sometime be just unusable. Experimental changes are made daily."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:225
msgid "This will affect your productivity if you don't know how to 'go back in time' (for example, your favorite brush doesn't work anymore)."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:227
msgid "But if you know how to do it, *no issue can really affect you*, because you know how to come back to a previous state."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:231
msgid "To travel the source in time we need to read the timeline history. The terminal tool for it is ``git log``."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:233
msgid "you@yourcomputer:~> cd ~/kritadev/krita/\n"
"you@yourcomputer:~/kritadev/krita> git log"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:238
msgid "With git log, you can consult all the last changes to the code, the 'commit'. What we're interested in is the long identification number, the 'git hash' (such as ``cca5819b19e0da3434192c5b352285b987a48796``). You can scroll the ``git log``, copy the ID number then quit(letter :kbd:`Q` on keyboard). Then time-travel in your source directory:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:240
msgid "you@yourcomputer:~/kritadev/krita> git checkout cca5819b19e0da3434192c5b352285b987a48796\n"
"you@yourcomputer:~/kritadev/krita> git pull"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:245
msgid "And, we build again:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:254
msgid "To update again to the actual and 'fresh from a minute ago' source-code named ``master``, simply ask git to come back to it with ``git checkout`` then ``pull`` to update :"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:256
msgid "you@yourcomputer:~/kritadev/krita> git checkout master\n"
"you@yourcomputer:~/kritadev/krita> git pull"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:263
msgid "Common problems"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:266
msgid "Outside of the source being unstable, there's the following common problems:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:268
msgid "The most common problem is a missing dependency. Install it. A missing dependency is not an \"error\" that you need to report to the other Krita developers."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:270
msgid "A dependency can also be too old. CMake will report when the version of a dependency is too old. That is also not an \"error\". You might need to update your Linux installation to a newer version."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:272
msgid "You can also have a successful build, then update your linux installation, and then find that Krita no longer builds. A library got updated, and you need to remove the ``CMakeCache.txt`` file in your build dir and run cmake again."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:274
msgid "Sometimes, changes in Krita's source code from git revision to git revision make it necessary to make your installation and/or build dir empty and build from scratch. One example is where a plugin is removed from Krita; the plugin will be in your install dir, and won't get updated when Krita's internals change."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:278
msgid "Building on Windows"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:280
msgid "On Windows, you will have to build all the dependencies yourself. This will take a long time. Note that you will do all your work in a CMD command window."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:282
msgid "This is also more difficult than building Krita on Linux, so you need to pay attention to details. If you follow the guide closely, install correct dependencies and make sure your PATH doesn't contain anything unwanted, there should be no issues."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:285
msgid "Prerequisites"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:287
msgid "Git - https://git-scm.com/downloads"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:288
msgid "CMake 3.3.2 or later - https://cmake.org/download/"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:289
msgid "CMake 3.9 does not build Krita properly at the moment, please use 3.8 or 3.10 instead."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:295
msgid "Make sure you have a compiler - Only mingw-w64 7.3 (by mingw-builds) - https://files.kde.org/krita/build/x86_64-7.3.0-release-posix-seh-rt_v5-rev0.7z"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:291
msgid "For threading, select posix."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:292
msgid "For exceptions, select seh (64-bit) or dwarf (32-bit)."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:293
msgid "Unzip mingw with `7zip <https://www.7-zip.org/>`_ into a folder like C:\\mingw-w64; the full path must not contain any spaces."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:294
msgid "MSVC is *not* supported at the moment."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:295
msgid "CLANG is *not* supported at the moment."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:296
msgid "MSYS is *not* supported at the moment."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:298
msgid "You will also need a release of Python 3.8 (not 3.7, not 3.9) - https://www.python.org."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:298
msgid "Make sure to have that version of python.exe in your path. This version of Python will be used for two things to configure Qt and to build the Python scripting module.  Do not set PYTHONHOME or PYTHONPATH."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:299
msgid "Make sure that your Python will have the correct architecture for the version you are trying to build. If building for 32-bit target, you need the 32-bit release of Python."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:300
msgid "Install the Windows 10 SDK - https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk/"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:301
msgid "It is useful to install Qt Creator - https://download.qt.io/official_releases/qtcreator/"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:303
msgid "***MAKE DOUBLE PLUS SURE YOU DO NOT HAVE ANY OTHER COMPILER OR DEVELOPMENT ENVIRONMENT OR PYTHON INSTALLATION IN YOUR PATH***"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:307
#: ../../untranslatable_pages/building_krita.rst:438
msgid "Preparation"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:311
msgid "After installing the Prerequisites, prepare your working directory. Keep this as short as possible."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:313
msgid "cd  c:\\\n"
"mkdir c:\\dev\n"
"mkdir c:\\d\n"
"mkdir c:\\i"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:320
msgid "Then prepare a batch file to set the environment. Every time you want to build or run your home-grown Krita, open the CMD windows, go to the c:\\dev folder and run the env.bat file. Read this example and ADJUST THE VERSION NUMBERS where necessary so the PATH is correct."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:322
msgid "set DLLTOOL_EXE=C:\\mingw-w64\\x86_64-7.3.0-posix-seh-rt_v5-rev0\\mingw64\\bin\\dlltool.exe\n"
"set MINGW_GCC_BIN=C:\\mingw-w64\\x86_64-7.3.0-posix-seh-rt_v5-rev0\\mingw64\\\\bin\n"
"set MINGW_BIN_DIR=C:\\mingw-w64\\x86_64-7.3.0-posix-seh-rt_v5-rev0\\mingw64\\\\bin\n"
"set BUILDROOT=c:\\dev\n"
"set BUILDDIR_INSTALL=%BUILDROOT%\\i\n"
"set PATH=%BUILDROOT%\\i\\bin;%BUILDROOT%\\i\\lib;%MINGW_GCC_BIN%;C:\\Program Files\\CMake\\bin;c:\\qt\\qtcreator-4.12.0\\bin;%PATH%\n"
"set \"WindowsSdkDir=%ProgramFiles(x86)%\\Windows Kits\\10\"\n"
"set \"WindowsSdkVerBinPath=%ProgramFiles(x86)%\\Windows Kits\\10\\bin\\10.0.17763.0\"\n"
"\n"
":: Since Krita 5.1 when using SIP5+ you also need to set up PYTHONPATH manually\n"
"set PYTHONPATH=%BUILDROOT%\\i\\lib\\site-packages;%PYTHONPATH%"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:336
msgid "cd c:\\dev\n"
"env.bat"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:341
msgid "Then get krita:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:345
msgid "cd c:\\dev\n"
"git clone https://invent.kde.org/graphics/krita.git"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:351
msgid "Getting the dependencies"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:356
msgid "Here we have two options. The quick one is to reuse prebuilt dependencies from the binary factory (you need to have the same version of the compiler locally as the one used on the binary factory). And the slow one is to build everything ourselves."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:359
msgid "Using prebuilt dependencies from the binary factory"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:361
msgid "To fetch prebuilt dependencies just run the embedded cmake script:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:363
msgid "cd c:\\dev\n"
"mkdir b\n"
"cd b\n"
"cmake ..\\krita\\build-tools\\ci-deps -G \"MinGW Makefiles\" -DCMAKE_INSTALL_PREFIX=..\\i\n"
"cmake --build ."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:373
msgid "Building dependencies yourself"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:376
msgid "We will build everything on Windows with the same script that is used to make the nightly builds and the releases:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:378
msgid "cd c:\\dev\n"
"krita\\build-tools\\windows\\build.cmd --no-interactive --jobs 8 --skip-krita --src-dir c:\\dev\\krita --download-dir c:\\dev\\d --deps-build-dir c:\\dev\\b --deps-install-dir c:\\dev\\i"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:383
msgid "This will take several hours, but you only need to do it once. When it's ready, make a zip archive of the c:\\dev\\i folder. That's a backup because we will install krita into the same folder as the dependencies, and if you need to nuke your krita build (because you're switching between branches or for some other reason, you'll also nuke your built dependencies. You can also build the depedencies into another folder, like c:\\dev\\i_deps, BUT in that case you're going to have trouble running Krita without first packaging it."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:386
#: ../../untranslatable_pages/building_krita.rst:480
#: ../../untranslatable_pages/building_krita.rst:549
msgid "Building Krita"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:393
msgid "Again, on the command line, with the same script that is used to make the nightly builds and the releases:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:395
msgid "cd c:\\dev\n"
"krita\\build-tools\\windows\\build.cmd --no-interactive --jobs 8 --skip-deps --src-dir c:\\dev\\krita --download-dir c:\\dev\\d --deps-build-dir c:\\dev\\b --deps-install-dir c:\\dev\\is --krita-build-dir c:\\dev\\b_krita --krita-install-dir c:\\dev\\i"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:400
msgid "If you are hacking on Krita, you can can rebuild Krita without running this script by entering the build directory and running mingw3-make install."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:402
msgid "cd c:\\dev\\b_krita\n"
"mingw32-make install"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:413
msgid "You must start Krita from the command prompt, after having run env.bat:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:415
msgid "cd c:\\dev\\b_krita\n"
"env.bat\n"
"c:\\dev\\i\\bin\\krita.exe"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:424
msgid "Building on macOS"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:426
msgid "We will build Krita on macOS with the same scripts that are used to build the nightly builds and the releases. We will *NOT* be building krita from within XCode, but from within the terminal."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:429
msgid "Prequisites"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:431
msgid "You will need to install:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:433
msgid "CMake: https://cmake.org"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:434
msgid "XCode: get it from the app store"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:435
msgid "Qt Creator: https://download.qt.io/official_releases/qtcreator/"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:441
msgid "Open Terminal.app"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:443
msgid "cd\n"
"mkdir dev\n"
"cd dev\n"
"git clone https://invent.kde.org/graphics/krita.git"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:453
msgid "Create an env.sh file that should contain the following lines:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:455
msgid "export BUILDROOT=$HOME/dev\n"
"export PATH=/Applications/CMake.app/Contents/bin:$BUILDROOT/i/bin/:$PATH"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:461
msgid "Building the dependencies"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:466
msgid "It is possible to build Krita against dependencies installed through MacPorts or some similar packaging service. If you do that, you're on your own though."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:468
msgid "Open Terminal.app and source the env.sh file you just created:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:470
msgid "cd ~/dev\n"
". env.sh\n"
"./krita/packaging/macos/osxbuild.sh builddeps"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:477
msgid "This will complain several time that it cannot find the Java SDK: just click that away, and don't worry. Building the dependencies will take several hours."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:482
msgid "In the same terminal window (if you open a new one, you will have to *source* the env.sh script again by running \". env.sh\" -- that's a dot."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:484
msgid "./krita/packaging/macos/osxbuild.sh buildinstall"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:488
msgid "This will build and install Krita to $HOME/dev/i/krita.app"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:496
msgid "You can run krita in the same terminal window:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:498
msgid "~/dev/i/krita.app/Contents/MacOS/krita"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:502
msgid "If you want to debug krita with lldb:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:504
msgid "lldb ~/dev/i/krita.app/Contents/MacOS/krita\n"
"(lldb) target create \"./i/bin/krita.app/Contents/MacOS/krita\"\n"
"Current executable set to './i/bin/krita.app/Contents/MacOS/krita' (x86_64).\n"
"(lldb) r"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:514
msgid "Building on Android"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:516
msgid "Use Linux to build Krita for Android. Building Krita for Android on another system is *NOT* supported."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:519
msgid "Setting up Android SDK and NDK"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:521
msgid "We right now use Android NDK version ``r18b`` to do our builds. So, I would recommend to use that. Download it from `google's website <https://developer.android.com/ndk/downloads/older_releases.html>`__ then extract it."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:525
msgid "Next, Android SDK. You can either download Android Studio or just the ``sdk-tools``. Both could be downloaded from `google's website <https://developer.android.com/studio>`__."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:528
msgid "If you downloaded Android Studio then open SDK manager and download ``Android SDK Build-Tools``. (more info: https://developer.android.com/studio/intro/update#sdk-manager)"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:531
msgid "If you download just ``sdk-tools``, then, extract it and run:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:533
msgid "cd <extracted-android-sdk-tools>/tools/bin\n"
"./sdkmanager --licenses\n"
"./sdkmanager platform-tools\n"
"./sdkmanager \"platforms;android-21\"\n"
"./sdkmanager \"platforms;android-28\"    # for androiddeployqt\n"
"./sdkmanager \"build-tools;28.0.2\""
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:542
msgid "If you get some ``ClasNotFoundException`` it might be because ``java`` version is set to ``11``. For ``sdkmanager`` to work, set it to ``8`` and then run it again."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:546
msgid "That's the only dependency we have to manage manually!"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:551
msgid "Now, to build krita, run ``<krita-source>/packaging/android/androidbuild.sh --help`` and pass the required arguments."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:554
msgid "Example:"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:556
msgid "./androidbuild.sh -p=all --src=/home/sh_zam/workspace/krita --build-type=Debug --build-root=/home/sh_zam/workspace/build-krita-android --ndk-path=/home/sh_zam/Android/Sdk/ndk-bundle --sdk-path=/home/sh_zam/Android/Sdk --api-level=21 --android-abi=armeabi-v7a"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:561
msgid "Installing Krita APK"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:563
msgid "To install run ``adb install -d -r <build-root>/krita_build_apk/build/outputs/apk/debug/krita_build_apk-debug.apk``."
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:566
msgid "``adb`` should be in ``<sdk-root>/platform-tools/``"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:569
msgid "Crash"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:571
msgid "If Krita crashes you can look up the logs using ``adb logcat``"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:576
msgid "Specialized Ways of Building Krita"
msgstr ""

#: ../../untranslatable_pages/building_krita.rst:578
msgid "These are specialized ways of building Krita on Windows and Linux while re-using the dependencies built on KDE's binary factory. You only need to try this if you don't want to build Krita's dependencies yourself on Windows or use distribution dependencies on Linux."
msgstr ""
